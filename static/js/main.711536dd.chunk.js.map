{"version":3,"sources":["CountrySelect.js","App.js","serviceWorker.js","index.js"],"names":["CountrySelect","props","options","label","value","country","customStyles","option","provided","state","Object","objectSpread","borderBottom","color","isSelected","padding","control","width","singleValue","opacity","isDisabled","transition","react_default","a","createElement","react_select_browser_esm","isSearchable","map","x","onChange","e","updateDefinitionJSON","handleChange","autoFocus","style","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sgOasDoc","require","idOasDoc","definitionJSON","bind","assertThisInitialized","setState","Error","SwaggerUI","domNode","document","getElementById","spec","className","display","textAlign","src_CountrySelect","float","fontSize","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ovvEAgEeA,EA3DO,SAAAC,GAEpB,IAAMC,EAAU,CACd,CAACC,MAAO,YAAaC,MAAO,aAC5B,CAACD,MAAO,YAAaC,MAAO,cAG1BC,EAAUJ,EAAMI,QAgBpB,IAAMC,EAAe,CACnBC,OAAQ,SAACC,EAAUC,GAAX,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GACHF,EADG,CAENI,aAAc,kBACdC,MAAOJ,EAAMK,WAAa,MAAQ,OAClCC,QAAS,MAEXC,QAAS,iBAAO,CAEdC,MAAO,MAETC,YAAa,SAACV,EAAUC,GACtB,IAAMU,EAAUV,EAAMW,WAAa,GAAM,EAGzC,OAAOV,OAAAC,EAAA,EAAAD,CAAA,GAAKF,EAAZ,CAAsBW,UAASE,WAFZ,oBAMvB,OAEEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,cAAgB,EAChBtB,MAASF,EAAQyB,IAAI,SAAAC,GACnB,GAAGA,EAAExB,OAASC,EACZ,OAAOuB,IAGXC,SAAY,SAACC,GAAD,OA1ChB,SAAsBA,GACpBzB,EAAUyB,EAAE1B,MACZH,EAAM8B,qBAAqB1B,GAwCN2B,CAAaF,IAChC5B,QAAWA,EACX+B,UAAY,OACZC,MAAS5B,KC8BA6B,cAjFb,SAAAA,EAAYlC,GAAO,IAAAmC,EAAA,OAAA1B,OAAA2B,EAAA,EAAA3B,CAAA4B,KAAAH,IACjBC,EAAA1B,OAAA6B,EAAA,EAAA7B,CAAA4B,KAAA5B,OAAA8B,EAAA,EAAA9B,CAAAyB,GAAAM,KAAAH,KAAMrC,KACDQ,MAAQ,CACXiC,SAAUC,EAAQ,KAClBC,SAAUD,EAAQ,KAClBtC,QAAS,YACTwC,eAAgB,MAElBT,EAAKL,qBAAuBK,EAAKL,qBAAqBe,KAA1BpC,OAAAqC,EAAA,EAAArC,CAAA0B,IARXA,oFAWE/B,GACnB,GAAgB,cAAZA,EACFiC,KAAKU,SAAS,CACZH,eAAgBP,KAAK7B,MAAMiC,SAC3BrC,QAASA,QAGR,IAAgB,cAAZA,EAOP,MAAM,IAAI4C,MAAM,qCANhBX,KAAKU,SAAS,CACZH,eAAgBP,KAAK7B,MAAMmC,SAC3BvC,QAASA,kDASb6C,IAAU,CACRC,QAASC,SAASC,eAAe,YACjCC,KAAMhB,KAAK7B,MAAMoC,8DAKnBP,KAAKP,qBAAqBO,KAAK7B,MAAMJ,qDAIrC,GAAkC,OAA9BiC,KAAK7B,MAAMoC,eAMb,MAAM,IAAII,MAAMX,KAAK7B,MAAMoC,gBAL3BK,IAAU,CACRC,QAASC,SAASC,eAAe,YACjCC,KAAMhB,KAAK7B,MAAMoC,kDASrB,OACEvB,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,OACbjC,EAAAC,EAAAC,cAAA,OAAKU,MAAO,CACVsB,QAAS,QACTC,UAAW,WAEXnC,EAAAC,EAAAC,cAACkC,EAAD,CACErD,QAAWiC,KAAK7B,MAAMJ,QACtB0B,qBAAwBO,KAAKP,qBAC7BG,MAAO,CACLjB,MAAO,IACP0C,MAAO,UAIXrC,EAAAC,EAAAC,cAAA,SACAU,MAAS,CACPsB,QAAS,SACTI,SAAU,KAHZ,yBAKwBtB,KAAK7B,MAAMJ,UAErCiB,EAAAC,EAAAC,cAAA,OAAKqC,GAAG,qBA5EEC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASlB,SAASC,eAAe,SD2H3C,kBAAmBkB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.711536dd.chunk.js","sourcesContent":["import React from 'react';\nimport Select from 'react-select';\n\n\n\nconst CountrySelect = props => {\n\n  const options = [\n    {label: \"Singapore\", value: \"Singapore\"},\n    {label: \"Indonesia\", value: \"Indonesia\"}\n  ]\n\n  let country = props.country;\n\n  function handleChange(e){\n    country = e.value\n    props.updateDefinitionJSON(country);\n  }\n\n  function getCurrOption() {\n\n    for(let i = 0 ; i < options.length ; i ++) {\n      if (options[i].label === country) {\n        return options[i]\n      }\n    }\n  }\n\n  const customStyles = {\n    option: (provided, state) => ({\n      ...provided,\n      borderBottom: '1px dotted pink',\n      color: state.isSelected ? 'red' : 'blue',\n      padding: 20,\n    }),\n    control: () => ({\n      // none of react-select's styles are passed to <Control />\n      width: 200,\n    }),\n    singleValue: (provided, state) => {\n      const opacity = state.isDisabled ? 0.5 : 1;\n      const transition = 'opacity 300ms';\n\n      return { ...provided, opacity, transition };\n    }\n  }\n\n  return(\n\n    <Select\n      isSearchable = {false}\n      value = {options.map(x => {\n        if(x.value == country) {\n          return x;\n        }\n      })}\n      onChange = {(e) => handleChange(e)}\n      options = {options}\n      autoFocus = \"true\"\n      style = {customStyles}\n    />\n  )\n}\n\nexport default CountrySelect;\n","import React, { Component } from 'react';\nimport './App.css'\nimport SwaggerUI from 'swagger-ui';\nimport '../node_modules/swagger-ui/dist/swagger-ui.css'\nimport CountrySelect from \"./CountrySelect.js\";\nimport Select from 'react-select';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sgOasDoc: require('/Users/tandeningklement/Desktop/Parser/oas-doc-portal/src/oas_spec/Singapore.json'),\n      idOasDoc: require('/Users/tandeningklement/Desktop/Parser/oas-doc-portal/src/oas_spec/Indonesia.json'),\n      country: \"Indonesia\",\n      definitionJSON: null,\n    }\n    this.updateDefinitionJSON = this.updateDefinitionJSON.bind(this)\n  }\n\n  updateDefinitionJSON(country){\n    if (country === \"Singapore\") {\n      this.setState({\n        definitionJSON: this.state.sgOasDoc,\n        country: country\n      })\n    }\n    else if (country === \"Indonesia\") {\n      this.setState({\n        definitionJSON: this.state.idOasDoc,\n        country: country\n      })\n    }\n    else {\n      throw new Error(\"Invalid country name check string\");\n    }\n  }\n\n  componentDidUpdate(){\n    SwaggerUI({\n      domNode: document.getElementById(\"api-data\"),\n      spec: this.state.definitionJSON\n    })\n  }\n\n  componentWillMount() {\n    this.updateDefinitionJSON(this.state.country)\n  }\n\n  componentDidMount() {\n    if (this.state.definitionJSON !== null) {\n      SwaggerUI({\n        domNode: document.getElementById(\"api-data\"),\n        spec: this.state.definitionJSON\n      })\n    } else {\n      throw new Error(this.state.definitionJSON);\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <div style={{\n          display: 'block',\n          textAlign: 'center'\n        }} >\n          <CountrySelect\n            country = {this.state.country}\n            updateDefinitionJSON = {this.updateDefinitionJSON}\n            style={{\n              width: 200,\n              float: 'left'\n            }}\n          />\n\n          <title\n          style = {{\n            display: \"inline\",\n            fontSize: 56,\n          }}\n          >API documentation for {this.state.country}</title>\n          </div>\n        <div id=\"api-data\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}