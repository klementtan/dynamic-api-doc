{"version":3,"sources":["DropdownCountry.js","pages/MasterOas.js","App.js","serviceWorker.js","index.js"],"names":["DropdownCountry","props","options","key","text","value","country","console","log","map","x","react_default","a","createElement","Dropdown","onChange","e","_ref","updateDefinitionJSON","handleChange","selection","MasterOas","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","masterOasDoc","require","definitionJSON","loading","bind","assertThisInitialized","Error","setState","className","redoc_lib","spec","nativeScrollbars","theme","colors","primary","main","jsonSampleExpandLevel","menuToggle","requiredPropsFirst","Component","ReactGA","initialize","App","sgOasDoc","idOasDoc","event","category","action","_this2","react_router_dom","basename","react_router","exact","path","render","Fragment","src_DropdownCountry","pathInMiddlePanel","component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.251ceafc.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Dropdown } from 'semantic-ui-react'\n\n\nconst DropdownCountry = props => {\n\n  const options = [\n    {\n      key: \"Singapore\",\n      text: \"Singapore\",\n      value: \"Singapore\"\n    },\n    {\n      key: \"Indonesia\",\n      text: \"Indonesia\",\n      value: \"Indonesia\"\n    }\n  ]\n\n  let country = props.country;\n\n  function handleChange(e,value){\n    country = e.value\n    props.updateDefinitionJSON(value);\n  }\n\n  function getCurrOption() {\n\n    for(let i = 0 ; i < options.length ; i ++) {\n      if (options[i].label === country) {\n        return options[i]\n      }\n    }\n  }\n  console.log(options.map(x => {\n        if(x.value == country) {\n          return x;\n        }\n      }))\n  return(\n\n    <Dropdown\n      text = \"Select Country\"\n      onChange = {(e,{value}) => handleChange(e,value)}\n      value = {country}\n      selection\n      options = {options}\n\n    />\n  )\n}\n\nexport default DropdownCountry;\n","import React, { Component } from 'react';\nimport '.././App.css'\nimport { RedocStandalone } from 'redoc';\n\nclass MasterOas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      masterOasDoc: require('../oas_spec/master-openapi.json'),\n      country: \"Master\",\n      definitionJSON: null,\n      loading: false\n    }\n    this.updateDefinitionJSON = this.updateDefinitionJSON.bind(this)\n  }\n\n  updateDefinitionJSON(country){\n    if (country === \"Master\") {\n      this.setState({\n        definitionJSON: this.state.masterOasDoc,\n        country: country\n      })\n    }\n    else {\n      throw new Error(\"Invalid country name check string\");\n    }\n  }\n\n  componentWillMount() {\n    this.updateDefinitionJSON(this.state.country)\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n          <h1\n            className=\"country-header-title\"\n          >API documentation for {this.state.country}</h1>\n        <RedocStandalone\n          spec={this.state.definitionJSON}\n          options={{\n            nativeScrollbars: true,\n            theme: { colors: { primary: { main: '#dd5522' } } },\n            jsonSampleExpandLevel: 0,\n            menuToggle: true,\n            requiredPropsFirst: true\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MasterOas;\n","import React, { Component } from 'react';\nimport {HashRouter as Router, Route} from 'react-router-dom';\nimport './App.css'\nimport { RedocStandalone } from 'redoc';\nimport { Dropdown } from 'semantic-ui-react'\nimport DropdownCountry from \"./DropdownCountry.js\";\nimport MasterOas from \"./pages/MasterOas\"\nimport ReactGA from 'react-ga';\n\nReactGA.initialize(\"UA-144834615-1\");\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sgOasDoc: require('./oas_spec/Singapore.json'),\n      idOasDoc: require('./oas_spec/Indonesia.json'),\n      country: \"Singapore\",\n      definitionJSON: null,\n    }\n    this.updateDefinitionJSON = this.updateDefinitionJSON.bind(this)\n  }\n\n\n\n  updateDefinitionJSON(country){\n    ReactGA.event({\n      category: 'User',\n      action: 'Viewing doucmentation for ' + country\n    });\n    if (country === \"Singapore\") {\n      this.setState({\n        definitionJSON: this.state.sgOasDoc,\n        country: country\n      })\n    }\n    else if (country === \"Indonesia\") {\n      this.setState({\n        definitionJSON: this.state.idOasDoc,\n        country: country\n      })\n    }\n    else {\n      console.log(\"app \"+country)\n      throw new Error(\"Invalid country name check string\");\n    }\n  }\n\n  componentWillMount() {\n    this.updateDefinitionJSON(this.state.country)\n  }\n\n  render() {\n    return (\n      <Router\n      basename =\"/dynamic-api-doc\">\n        <div className=\"App\" >\n            <Route exact path=\"/\" render={props => (\n              <React.Fragment>\n                <div className=\"country-header\">\n                  <h1\n                  className=\"country-header-title\"\n                  >API documentation for {this.state.country}</h1>\n                  <DropdownCountry\n                    className=\"country-header-dropbox\"\n                    country = {this.state.country}\n                    updateDefinitionJSON = {this.updateDefinitionJSON}\n                  />\n                </div>\n\n              <RedocStandalone\n                spec={this.state.definitionJSON}\n                options={{\n                  nativeScrollbars: true,\n                  theme: { colors: { primary: { main: '#dd5522' } } },\n                  pathInMiddlePanel: true,\n                  jsonSampleExpandLevel: 5,\n                  requiredPropsFirst: true,\n                }}\n              />\n            </React.Fragment>\n          )} />\n            <Route exact path=\"/master\" component={MasterOas}/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}