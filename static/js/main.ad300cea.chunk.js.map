{"version":3,"sources":["CountrySwitch.js","App.js","serviceWorker.js","index.js"],"names":["CountrySwitch","props","checked","country","react_default","a","createElement","className","htmlFor","react_switch_default","onChange","console","log","updateDefinitionJSON","width","uncheckedIcon","style","display","justifyContent","alignItems","height","fontSize","color","paddingRight","checkedIcon","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sgOasDoc","require","idOasDoc","definitionJSON","bind","assertThisInitialized","setState","Error","SwaggerUI","domNode","document","getElementById","spec","src_CountrySwitch","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"40YAgEeA,EA7DO,SAAAC,GAEpB,IACIC,EAA0B,cADZD,EAAME,QAexB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,kBACfH,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,eACbJ,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACEH,QAAWA,EACXQ,SAAY,kBAjBlBR,GAAWA,EACXS,QAAQC,IAAIV,QACTA,EACDD,EAAMY,qBAAqB,aAE3BZ,EAAMY,qBAAqB,eAavBC,MAAS,GACTC,cACEX,EAAAC,EAAAC,cAAA,OACEU,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,OACRC,SAAU,GACVC,MAAO,SACPC,aAAc,IAGlBnB,EAAAC,EAAAC,cAAA,qBAGFkB,YACEpB,EAAAC,EAAAC,cAAA,OACEU,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,OACRC,SAAU,GACVC,MAAO,SACPC,aAAc,IAGlBnB,EAAAC,EAAAC,cAAA,wBCsBGmB,sBArEb,SAAAA,EAAYxB,GAAO,IAAAyB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM5B,KACDgC,MAAQ,CACXC,SAAUC,EAAQ,KAClBC,SAAUD,EAAQ,KAClBhC,QAAS,YACTkC,eAAgB,MAElBX,EAAKb,qBAAuBa,EAAKb,qBAAqByB,KAA1BX,OAAAY,EAAA,EAAAZ,CAAAD,IARXA,oFAWEvB,GAEnB,GADAQ,QAAQC,IAAIT,GACI,cAAZA,EACF0B,KAAKW,SAAS,CACZH,eAAgBR,KAAKI,MAAMC,SAC3B/B,QAASA,QAGR,IAAgB,cAAZA,EAOP,MAAM,IAAIsC,MAAM,qCANhBZ,KAAKW,SAAS,CACZH,eAAgBR,KAAKI,MAAMG,SAC3BjC,QAASA,kDASbuC,IAAU,CACRC,QAASC,SAASC,eAAe,YACjCC,KAAMjB,KAAKI,MAAMI,8DAKnBR,KAAKhB,qBAAqBgB,KAAKI,MAAM9B,qDAIrC,GAAkC,OAA9B0B,KAAKI,MAAMI,eAMb,MAAM,IAAII,MAAMZ,KAAKI,MAAMI,gBAL3BK,IAAU,CACRC,QAASC,SAASC,eAAe,YACjCC,KAAMjB,KAAKI,MAAMI,kDASrB,OACEjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyC,EAAD,CACElC,qBAAwBgB,KAAKhB,qBAC7BV,QAAW0B,KAAKI,MAAM9B,UAExBC,EAAAC,EAAAC,cAAA,OAAK0C,GAAK,kBACPnB,KAAKI,MAAM9B,SAEdC,EAAAC,EAAAC,cAAA,OAAK0C,GAAG,qBAhEEC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASb,SAASC,eAAe,SD2H3C,kBAAmBa,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ad300cea.chunk.js","sourcesContent":["import React from 'react';\nimport Switch from \"react-switch\";\n\nconst CountrySwitch = props => {\n\n  let currCountry = props.country\n  let checked = currCountry === \"Singapore\"  //Set singapore as checked\n\n  function handleChange(){\n    checked = !checked\n    console.log(checked)\n    if(checked){\n      props.updateDefinitionJSON(\"Singapore\")\n    } else {\n      props.updateDefinitionJSON(\"Indonesia\")\n    }\n\n\n  }\n\n  return (\n    <div className = \"country-switch\">\n      <label htmlFor=\"icon-switch\">\n        <span> Switch for country </span>\n        <Switch\n          checked = {checked}\n          onChange = {() => handleChange()}\n          width = {70}\n          uncheckedIcon = {\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                height: \"100%\",\n                fontSize: 15,\n                color: \"orange\",\n                paddingRight: 2\n              }}\n            >\n            <h1> Indo </h1>\n            </div>\n          }\n          checkedIcon = {\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                height: \"100%\",\n                fontSize: 15,\n                color: \"orange\",\n                paddingRight: 2,\n              }}\n            >\n            <h1> SG </h1>\n            </div>\n          }\n        />\n      </label>\n    </div>\n  )\n}\n\nexport default CountrySwitch;\n","import React, { Component } from 'react';\nimport './App.css'\nimport SwaggerUI from 'swagger-ui';\nimport CountrySwitch from \"./CountrySwitch.js\"\nimport '../node_modules/swagger-ui/dist/swagger-ui.css'\nimport Switch from \"react-switch\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sgOasDoc: require('/Users/tandeningklement/Desktop/Parser/oas-doc-portal/src/oas_spec/Singapore.json'),\n      idOasDoc: require('/Users/tandeningklement/Desktop/Parser/oas-doc-portal/src/oas_spec/Indonesia.json'),\n      country: \"Indonesia\",\n      definitionJSON: null,\n    }\n    this.updateDefinitionJSON = this.updateDefinitionJSON.bind(this)\n  }\n\n  updateDefinitionJSON(country){\n    console.log(country)\n    if (country === \"Singapore\") {\n      this.setState({\n        definitionJSON: this.state.sgOasDoc,\n        country: country\n      })\n    }\n    else if (country === \"Indonesia\") {\n      this.setState({\n        definitionJSON: this.state.idOasDoc,\n        country: country\n      })\n    }\n    else {\n      throw new Error(\"Invalid country name check string\");\n    }\n  }\n\n  componentDidUpdate(){\n    SwaggerUI({\n      domNode: document.getElementById(\"api-data\"),\n      spec: this.state.definitionJSON\n    })\n  }\n\n  componentWillMount() {\n    this.updateDefinitionJSON(this.state.country)\n  }\n\n  componentDidMount() {\n    if (this.state.definitionJSON !== null) {\n      SwaggerUI({\n        domNode: document.getElementById(\"api-data\"),\n        spec: this.state.definitionJSON\n      })\n    } else {\n      throw new Error(this.state.definitionJSON);\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <CountrySwitch\n          updateDefinitionJSON = {this.updateDefinitionJSON}\n          country = {this.state.country}\n        />\n        <div id = \"country-header\">\n          {this.state.country}\n        </div>\n        <div id=\"api-data\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}