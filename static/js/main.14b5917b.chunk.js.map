{"version":3,"sources":["CountrySelect.js","App.js","serviceWorker.js","index.js"],"names":["CountrySelect","props","options","label","value","country","react_default","a","createElement","react_select_browser_esm","isSearchable","map","x","onChange","e","updateDefinitionJSON","handleChange","autoFocus","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sgOasDoc","require","idOasDoc","masterOasDoc","definitionJSON","bind","assertThisInitialized","setState","Error","_this2","className","lib","_ref","style","isSticky","src_CountrySelect","_ref2","redoc_lib","spec","nativeScrollbars","theme","colors","primary","main","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2tkQA6CeA,EAxCO,SAAAC,GAEpB,IAAMC,EAAU,CACd,CAACC,MAAO,SAAUC,MAAO,UACzB,CAACD,MAAO,YAAaC,MAAO,aAC5B,CAACD,MAAO,YAAaC,MAAO,cAG1BC,EAAUJ,EAAMI,QAgBpB,OAEEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,cAAgB,EAChBN,MAASF,EAAQS,IAAI,SAAAC,GACnB,GAAGA,EAAER,OAASC,EACZ,OAAOO,IAGXC,SAAY,SAACC,GAAD,OAvBhB,SAAsBA,GACpBT,EAAUS,EAAEV,MACZH,EAAMc,qBAAqBV,GAqBNW,CAAaF,IAChCZ,QAAWA,EACXe,UAAY,kBCsCHC,cAtEb,SAAAA,EAAYjB,GAAO,IAAAkB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMrB,KACDyB,MAAQ,CACXC,SAAUC,EAAQ,KAClBC,SAAUD,EAAQ,KAClBE,aAAcF,EAAQ,KACtBvB,QAAS,SACT0B,eAAgB,MAElBZ,EAAKJ,qBAAuBI,EAAKJ,qBAAqBiB,KAA1BZ,OAAAa,EAAA,EAAAb,CAAAD,IATXA,oFAYEd,GACnB,GAAgB,cAAZA,EACFiB,KAAKY,SAAS,CACZH,eAAgBT,KAAKI,MAAMC,SAC3BtB,QAASA,SAGR,GAAgB,cAAZA,EACPiB,KAAKY,SAAS,CACZH,eAAgBT,KAAKI,MAAMG,SAC3BxB,QAASA,QAGR,IAAgB,WAAZA,EAOP,MAAM,IAAI8B,MAAM,qCANhBb,KAAKY,SAAS,CACZH,eAAgBT,KAAKI,MAAMI,aAC3BzB,QAASA,kDASbiB,KAAKP,qBAAqBO,KAAKI,MAAMrB,0CAG9B,IAAA+B,EAAAd,KACP,OACEhB,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,OACb/B,EAAAC,EAAAC,cAAC8B,EAAA,gBAAD,KACAhC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8B,EAAA,OAAD,KAAS,SAAAC,KAAGC,MAAHD,EAASE,SAAT,OACPnC,EAAAC,EAAAC,cAACkC,EAAD,CACErC,QAAW+B,EAAKV,MAAMrB,QACtBU,qBAAwBqB,EAAKrB,yBAI/BT,EAAAC,EAAAC,cAAC8B,EAAA,OAAD,KAAS,SAAAK,GAAA,IAAGH,EAAHG,EAAGH,MAAHG,EAASF,SAAT,OACPnC,EAAAC,EAAAC,cAAA,MAAIgC,MAAOA,GAAX,yBAAyCJ,EAAKV,MAAMrB,YAI1DC,EAAAC,EAAAC,cAACoC,EAAA,gBAAD,CACEC,KAAMvB,KAAKI,MAAMK,eACjB7B,QAAS,CACP4C,kBAAkB,EAClBC,MAAO,CAAEC,OAAQ,CAAEC,QAAS,CAAEC,KAAM,yBA9D9BC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.14b5917b.chunk.js","sourcesContent":["import React from 'react';\nimport Select from 'react-select';\n\n\n\nconst CountrySelect = props => {\n\n  const options = [\n    {label: \"Master\", value: \"Master\"},\n    {label: \"Singapore\", value: \"Singapore\"},\n    {label: \"Indonesia\", value: \"Indonesia\"}\n  ]\n\n  let country = props.country;\n\n  function handleChange(e){\n    country = e.value\n    props.updateDefinitionJSON(country);\n  }\n\n  function getCurrOption() {\n\n    for(let i = 0 ; i < options.length ; i ++) {\n      if (options[i].label === country) {\n        return options[i]\n      }\n    }\n  }\n\n  return(\n\n    <Select\n      isSearchable = {false}\n      value = {options.map(x => {\n        if(x.value == country) {\n          return x;\n        }\n      })}\n      onChange = {(e) => handleChange(e)}\n      options = {options}\n      autoFocus = \"true\"\n    />\n  )\n}\n\nexport default CountrySelect;\n","import React, { Component } from 'react';\nimport './App.css'\nimport { RedocStandalone } from 'redoc';\nimport CountrySelect from \"./CountrySelect.js\";\nimport Select from 'react-select';\nimport { StickyContainer, Sticky } from 'react-sticky';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sgOasDoc: require('/Users/tandeningklement/Desktop/Parser/oas-doc-portal/src/oas_spec/Singapore.json'),\n      idOasDoc: require('/Users/tandeningklement/Desktop/Parser/oas-doc-portal/src/oas_spec/Indonesia.json'),\n      masterOasDoc: require('/Users/tandeningklement/Desktop/Parser/oas-doc-portal/src/oas_spec/master-openapi.json'),\n      country: \"Master\",\n      definitionJSON: null,\n    }\n    this.updateDefinitionJSON = this.updateDefinitionJSON.bind(this)\n  }\n\n  updateDefinitionJSON(country){\n    if (country === \"Singapore\") {\n      this.setState({\n        definitionJSON: this.state.sgOasDoc,\n        country: country\n      })\n    }\n    else if (country === \"Indonesia\") {\n      this.setState({\n        definitionJSON: this.state.idOasDoc,\n        country: country\n      })\n    }\n    else if (country === \"Master\") {\n      this.setState({\n        definitionJSON: this.state.masterOasDoc,\n        country: country\n      })\n    }\n    else {\n      throw new Error(\"Invalid country name check string\");\n    }\n  }\n\n  componentWillMount() {\n    this.updateDefinitionJSON(this.state.country)\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <StickyContainer>\n        <div >\n          <Sticky>{({ style,isSticky }) =>\n            <CountrySelect\n              country = {this.state.country}\n              updateDefinitionJSON = {this.updateDefinitionJSON}\n            />}\n           </Sticky>\n\n            <Sticky>{({ style,isSticky }) =>\n              <h1 style={style}>API documentation for {this.state.country}</h1>}\n            </Sticky>\n\n          </div>\n        <RedocStandalone\n          spec={this.state.definitionJSON}\n          options={{\n            nativeScrollbars: true,\n            theme: { colors: { primary: { main: '#dd5522' } } },\n          }}\n        />\n        </StickyContainer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}